import datetime
import os
from dotenv import load_dotenv
import json
import asyncio
from aiogram.types import FSInputFile
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import WebAppInfo, CallbackQuery, ChatMemberUpdated, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import user_bot

load_dotenv()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.environ["BOT_TOKEN"])
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_FILE = "data.json"
DEFAULT_SETTINGS = {
    "channels_to": [],
    "channels_from": [],
    "hours": 128,
    "max_posts": None,
    "history": [],
    "style": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "message_id": 18,
    "run": False
}

class States(StatesGroup):
    waiting_for_data = State()

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

@dp.message(StateFilter(States.waiting_for_data))
async def edit_data(message: types.Message, state: FSMContext):
    markup = InlineKeyboardBuilder([[InlineKeyboardButton(text="‚Ü© | –ù–∞–∑–∞–¥", callback_data="main")]])

    try:
        data_new = message.text
        try:
            await bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception:
            pass
        await message.delete()
        data_new = json.loads(data_new)

        data = json.loads(open("data.json", encoding="utf-8").read())

        timel = data_new["post_frequency"]
        if timel.split()[1] == "days":
            hours = int(timel.split()[0]) * 24
        else:
            hours = int(timel.split()[0])
        print(hours)

        data[f"{message.from_user.id}"]["channels_from"] = data_new["channels"]
        data[f"{message.from_user.id}"]["hours"] = hours
        data[f"{message.from_user.id}"]["max_posts"] = int(data_new["news_count"])
        data[f"{message.from_user.id}"]["style"] = data_new["writing_style"] + " " + data_new["custom_style_description"]


        with open("data.json", "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

        await state.clear()
        await message.answer_photo(photo=FSInputFile("./images/edit.png"), text="–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å", reply_markup=markup.as_markup())
    except Exception as e:
        print(e)
        await message.answer(photo=FSInputFile("./images/error.png"), text="–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–º?", reply_markup=markup.as_markup())


@dp.message()
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception:
        pass
    await message.delete()

    data = load_data()
    user_id = str(message.from_user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in data:
        data[user_id] = DEFAULT_SETTINGS.copy()
        save_data(data)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    button_text = "‚èπ | –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if data[user_id]["run"] else "‚ñ∂ | –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    button_callback = "stop" if data[user_id]["run"] else "run"


    await message.answer_photo(photo=FSInputFile("./images/Welcome.png"), caption=
        """–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –≤–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–º–º–∞—Ä–∏-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üìà

–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ.

–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π! üíº""",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=button_callback
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìù | –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="edit"
                )
            ]
        ])
    )
    print(2)

@dp.callback_query(F.data == "main")
async def main_menu(callback: CallbackQuery, state: FSMContext):

    await state.clear()

    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
    except Exception:
        pass

    await callback.message.delete()

    data = load_data()
    user_id = str(callback.message.from_user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in data:
        data[user_id] = DEFAULT_SETTINGS.copy()
        save_data(data)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    button_text = "‚èπ | –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if data[user_id]["run"] else "‚ñ∂ | –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    button_callback = "stop" if data[user_id]["run"] else "run"

    await callback.message.answer_photo(photo=FSInputFile("./images/Welcome.png"), caption=
        """–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –≤–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–º–º–∞—Ä–∏-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üìà

–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ.

–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π! üíº""",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=button_callback
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìù | –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="edit"
                )
            ]
        ])
    )

@dp.my_chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def bot_added_to_group(event: ChatMemberUpdated):
    if event.chat.type == "private":
        return

    data = load_data()
    user_id = str(event.from_user.id)
    group_id = event.chat.id

    if user_id not in data:
        data[user_id] = DEFAULT_SETTINGS.copy()

    if group_id not in data[user_id]["channels_to"]:
        data[user_id]["channels_to"].append(group_id)
        save_data(data)

@dp.callback_query(F.data == "edit")
async def edit_settings(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    user_id = str(callback.from_user.id)
    data = load_data()
    settings = data.get(user_id, DEFAULT_SETTINGS.copy())

    settings_preview = (
        f"<b>üì¶ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"<b>üì° –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {', '.join(map(str, settings.get('channels_from', []))) or '‚Äî'}\n"
        f"<b>‚è± –ß–∞—Å—Ç–æ—Ç–∞:</b> –∫–∞–∂–¥—ã–µ {settings.get('hours', 0)} —á–∞—Å–æ–≤\n"
        f"<b>üì∞ –ú–∞–∫—Å. –ø–æ—Å—Ç–æ–≤:</b> {settings.get('max_posts', '‚Äî')}\n"
        f"<b>üé® –°—Ç–∏–ª—å:</b> {settings.get('style', '‚Äî')}\n"
    )

    text = settings_preview + "\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ json-–¥–∞–Ω–Ω—ã–µ:</i>"

    markup = InlineKeyboardBuilder([
        [InlineKeyboardButton(text="‚Ü© | –ù–∞–∑–∞–¥", callback_data="main")],
        [InlineKeyboardButton(text="‚úè | –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä", web_app=WebAppInfo(url="https://xalera.space/"))]
    ])

    await callback.message.answer_photo(FSInputFile("./images/config.png"), text, reply_markup=markup.as_markup(), parse_mode="html")
    await state.set_state(States.waiting_for_data)


@dp.callback_query(F.data.in_(["run", "stop"]))
async def handle_bot_state(callback: CallbackQuery):
    data = load_data()
    user_id = str(callback.from_user.id)

    if user_id not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data[user_id]["run"] = callback.data == "run"
    save_data(data)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    button_text = "‚èπ | –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if data[user_id]["run"] else "‚ñ∂ | –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    button_callback = "stop" if data[user_id]["run"] else "run"

    await callback.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=button_callback
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìù | –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="edit")
            ]
        ])
    )

    if data[user_id]["run"]:
        await asyncio.create_task(run_bot_for_user(user_id))
    try:
        await callback.message.delete()
    except:
        pass
    await callback.answer(f"–°–∞–º–º–∞—Ç–æ—Ä {'–∑–∞–ø—É—â–µ–Ω' if data[user_id]['run'] else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")


async def run_bot_for_user(user_id: str):
    while True:
        data = load_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
        if user_id not in data or not data[user_id]["run"]:
            break

        user_data = data[user_id]
        post = await user_bot.get_result(int(user_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        for channel_id in user_data["channels_to"]:
            try:
                await bot.send_message(chat_id=channel_id, text=post, parse_mode="html")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        await asyncio.sleep(user_data["hours"] * 3600)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())